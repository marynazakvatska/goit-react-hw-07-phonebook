{"version":3,"sources":["components/ContactLIst/ContactList.module.css","components/Phonebook/Phonebook.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/actions.js","redux/contactsApi.js","components/ContactForm/ContactForm.js","redux/contacts-selectors.js","components/ContactLIst/ContactList.js","redux/filterReducer.js","components/Filter/Filter.js","components/Phonebook/Phonebook.js","App.js","redux/store.js","index.js"],"names":["module","exports","createAction","name","number","payload","id","shortid","generate","phonebookApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","providesTags","deleteContacts","mutation","url","method","invalidatesTags","addContact","contact","body","useGetContactsQuery","useDeleteContactsMutation","useAddContactMutation","SignupForm","useState","setName","setNumber","nameInputId","numberInputId","handleChange","e","target","value","reset","className","s","forma","onSubmit","preventDefault","htmlFor","type","pattern","title","required","onChange","btnsubmit","getFilter","state","filter","getVisibleContacts","createSelector","queries","data","contacts","normalizedFilter","toLowerCase","includes","ContactList","visibleContacts","useSelector","onDeleteContact","contactList","map","contactItem","contactDescription","deleteBtn","onClick","handleFilterContacts","createReducer","_","Filter","dispatch","useDispatch","label_filter","Phonebook","section","ContactForm","title_contact","App","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.308de86a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2nBTL\",\"contactItem\":\"ContactList_contactItem__32v0A\",\"deleteBtn\":\"ContactList_deleteBtn__CY4Xt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Phonebook_title__2xsBe\",\"section\":\"Phonebook_section__1t6Bc\",\"title_contact\":\"Phonebook_title_contact__28BOC\",\"filter_label\":\"Phonebook_filter_label__112Tl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forma\":\"ContactForm_forma__1MZkx\",\"btnsubmit\":\"ContactForm_btnsubmit__1zc4C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label_filter\":\"Filter_label_filter__x_64U\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\n\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\n\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\n\r\n\r\nexport  const addContact = createAction('ADD_PHONE', (  {name, number}  ) =>\r\n{\r\n  return {\r\n    payload:\r\n     {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    }    \r\n  }\r\n});\r\n\r\n\r\nexport const deleteContact = createAction('DELETE_PHONE');\r\nexport const changeFilter = createAction('FILTER_PHONE')\r\n\r\n/* export default { addContact, deleteContact, changeFilter} */\r\n     \r\n\r\n\r\n\r\n\r\n\r\n/*   export  const addContact = (  {name, number}  ) => ({\r\n   type: actionTypes.ADD_PHONE,\r\n     payload:\r\n     {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    }    \r\n  })   */\r\n\r\n/* \r\n export const deleteContact = (contactId) => ({\r\n     type:  actionTypes.DELETE_PHONE,\r\n    payload: contactId,      \r\n})\r\n     \r\n\r\n export const changeFilter = value => \r\n({\r\n    type: actionTypes.FILTER_PHONE,\r\n    payload: value,\r\n}) */\r\n       \r\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const phonebookApi = createApi({\r\n  reducerPath: \"phonebookApi\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"http://localhost:3000\",\r\n  }),\r\n  tagTypes: [\"Contacts\"],\r\n  endpoints: (builder) => ({\r\n    getContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: [\"Contacts\"],\r\n    }),\r\n    deleteContacts: builder.mutation({\r\n      query: (id) => ({ url: `/contacts/${id}`, method: \"DELETE\" }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n    addContact: builder.mutation({\r\n      query: (contact) => ({\r\n        url: \"/contacts\",\r\n        method: \"POST\",\r\n        body: {\r\n          ...contact,\r\n        },\r\n      }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetContactsQuery,\r\n  useDeleteContactsMutation,\r\n  useAddContactMutation,\r\n} = phonebookApi;\r\n","import { useState } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport shortid from \"shortid\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport { useAddContactMutation } from \"../../redux/contactsApi\";\r\n\r\nconst SignupForm = () => {\r\n  // const dispatch = useDispatch();\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const [addContact] = useAddContactMutation();\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // dispatch(actions.addContact({ name, number }));\r\n    addContact({ name, number });\r\n    /*  onSubmit({name, number}) */\r\n    reset();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={s.forma}>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor={nameInputId}>\r\n          Name{\" \"}\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={handleChange}\r\n            id={nameInputId}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={numberInputId}>\r\n          Number{\" \"}\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChange}\r\n            id={numberInputId}\r\n          />\r\n        </label>\r\n\r\n        <button className={s.btnsubmit} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n\r\n/* const mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(addContact(contact))  \r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SignupForm)\r\n */\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) =>\r\n  state.phonebookApi.queries[\"getContacts(undefined)\"]?.data;\r\nexport const getFilter = (state) => state.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts?.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n","import { useEffect } from \"react\";\r\nimport \"./ContactList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactList.module.css\";\r\nimport { getVisibleContacts } from \"../../redux/contacts-selectors\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport * as contactsOperations from \"../../redux/contactsOperations\";\r\nimport { contactsSelectors } from \"../../redux/slice\";\r\nimport {\r\n  useGetContactsQuery,\r\n  useDeleteContactsMutation,\r\n} from \"../../redux/contactsApi\";\r\n\r\nconst ContactList = () => {\r\n  const visibleContacts = useSelector(getVisibleContacts);\r\n  // const dispatch = useDispatch();\r\n  const { data: contacts } = useGetContactsQuery();\r\n  const [onDeleteContact] = useDeleteContactsMutation();\r\n  // const stateContact = useSelector(contactsSelectors.selectAll); //new\r\n\r\n  // useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  // const onDeleteContact = (id) => dispatch(actions.deleteContact(id));\r\n\r\n  return (\r\n    <>\r\n      {/* {stateContact.length > 0 && ( //new\r\n        <ul className={s.contactList}>\r\n          {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className={s.contactItem}>\r\n              <p className={s.contactDescription}>\r\n                {name}: {number}\r\n              </p>\r\n              <button\r\n                className={s.deleteBtn}\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )} */}\r\n      <ul className={s.contactList}>\r\n        {contacts &&\r\n          visibleContacts.map(({ id, name, number }) => (\r\n            <li key={id} className={s.contactItem}>\r\n              <p className={s.contactDescription}>\r\n                {name}: {number}\r\n              </p>\r\n              <button\r\n                className={s.deleteBtn}\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { createAction, createReducer } from \"@reduxjs/toolkit\";\r\n\r\nexport const handleFilterContacts = createAction(\"phonebook/FilterContacts\");\r\n\r\nexport const filter = createReducer(\"\", {\r\n  [handleFilterContacts]: (_, { payload }) => payload,\r\n});\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\nimport { getFilter } from \"../../redux/contacts-selectors\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleFilterContacts } from \"../../redux/filterReducer\";\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.label_filter}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => dispatch(handleFilterContacts(e.target.value))}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\n","\r\nimport './Phonebook.module.css';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport ContactList from '../ContactLIst/ContactList';\r\nimport Filter from '../Filter/Filter';\r\nimport s from './Phonebook.module.css';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n/* import { contactSelector } from '../../redux/slice'; */\r\n\r\n function Phonebook() {\r\n  \r\n    return (\r\n        <div className={s.section}>\r\n            <h1 className={s.title}>Phonebook</h1>\r\n            <ContactForm />\r\n\r\n            <h2 className={s.title_contact}>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n        <ToastContainer/>\r\n\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Phonebook","import React from \"react\";\nimport \"./App.css\";\nimport Phonebook from \"./components/Phonebook/Phonebook\";\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Phonebook />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport phoneReducer from \"./slice\";\r\nimport { phonebookApi } from \"./contactsApi\";\r\nimport { filter } from \"./filterReducer\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport { logger } from \"redux-logger\";\r\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  phonebookApi.middleware,\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    [phonebookApi.reducerPath]: phonebookApi.reducer,\r\n    filter,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n\r\nexport default { store /* , persistor  */ };\r\n\r\n/* const rootReducer = combineReducers({\r\n    contacts: phoneReducer,\r\n});\r\n */\r\n/* const store = createStore(rootReducer, composeWithDevTools()) */\r\n\r\n/* const persistConfig = {\r\n  key: 'persistedReducer',\r\n  storage,\r\n    blacklist: ['filter'],\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: phoneReducer,\r\n}); */\r\n\r\n/*  const persistedReducer = persistReducer(persistConfig, rootReducer);  */\r\n\r\n/* const persistor = persistStore(store) */\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n        <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}